perceptron(inputs,y,weights, threshold, learning_rate)
inputs
inputs[,1]
inputs[1,]
inputs[1,] * weights
inputs[1,] %*% weights
inputs[1,] %*% t(weights)
t(inputs[1,]) %*% (weights)
weights = matrix(c(0,0,0))
threshold <- 0.5
learning_rate = 0.1
inputs = rbind(c(1,0,0),c(1,0,1),c(1,1,0))
y <- c(1,1,1,0)
t(inputs[1,]) %*% matrix(weights)
weights = matrix(c(1,0,0))
t(inputs[1,]) %*% matrix(weights)
t(inputs[1,]) * matrix(weights)
t(inputs[1,]) %*% matrix(weights)
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
for(i in seq(1:n)){
inputs[i,] %*% t(weights)
}
}
perceptron(inputs,y,weights, threshold, learning_rate)
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
for(i in seq(1:n)){
print(inputs[i,] %*% t(weights))
}
}
perceptron(inputs,y,weights, threshold, learning_rate)
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
for(i in seq(1:n)){
print(t(inputs[i,]) %*% weights)
}
}
perceptron(inputs,y,weights, threshold, learning_rate)
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
for(i in seq(1:n)){
print(t(inputs[i,]) %*% weights)
}
}
perceptron(inputs,y,weights, threshold, learning_rate)
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
for(i in seq(1:n)){
result <- ifelse(t(inputs[i,]) %*% weights) > threshold,1,0)
}
}
perceptron <- function(inputs, target,weights,threshold,learning_rate){
n <- dim(inputs)[1]
while(TRUE){
for(i in seq(1:n)){
result <- ifelse(t(inputs[i,]) %*% weights > threshold,1,0)
error = desired_output - result
if(error != 0){
error_count = error_count + 1
print(learning_rate * error * inputs[i,])
}
}
}
}
perceptron(inputs,y,weights, threshold, learning_rate)
inputs[1,]
inputs[1,] %*% weights
weights = matrix(c(0,0,0))
weights = matrix(c(0,0,0))
inputs[1,] %*% weights
r <- inputs[1,] %*% weights
inputs[1,] * y
inputs[1,] * y[,1]
inputs[1,] * y[1]
inputs[1,] %*% y[1]
inputs[1,] %*% y[1]
inputs[1,1] %*% y[1]
inputs[1,]
t(inputs[1,]) %>% y
t(inputs[1,]) %>% y[1]
sum(t(inputs[1,]) %>% y[1])
t(inputs[1,]) %>% y[1]
devtools::install_github('WinVector/WVPlots')
library(WVPlots)
library(ggplot2)
reload()
library(WVPlots)
needs(gigraph)
library(raster)
library(tidyr)
unload(raster)
detatch(raster)
detach
detach(raster)
detach('raster')
sgMap <- openMap(ul=loc[1],lr=loc[2], zoom = 13, source="osm")
?openMap
??openMap
library(OpenStreetMap) #OSM maps
openMap
sgMap <- openmap(ul=loc[1],lr=loc[2], zoom = 13)
addr <- '93 Stamford Road, 178897'
loc <- as.numeric(geocode(addr))
library(ggmap)     #Google maps
addr <- '93 Stamford Road, 178897'
loc <- as.numeric(geocode(addr))
lbl <- data.frame(lon=loc[1],lat=loc[2],text=addr)
lbl
addr <- 'Marina Bay Sands'
loc <- as.numeric(geocode(addr))
lbl <- data.frame(lon=loc[1],lat=loc[2],text=addr)
sgMap <- openmap(ul=loc[1],lr=loc[2], zoom = 13)
lbl
p <- ggmap(sgMap)
sgMap <- openmap(ul=loc[1],lr=loc[2], zoom = 13)
?openmap
sgMap <- openmap(upperLeft=loc[1],lowerRight=loc[2], zoom = 13)
sgMap <- openmap(upperLeft=loc[1],lowerRight=loc[2], zoom = 13)
lbl <- data.frame(lon=loc[1],lat=loc[2],text=addr)
sgMap <- openmap(upperLeft=loc[1],lowerRight=loc[2], zoom = 13)
lbl
p <- ggmap(location = "Singapore",zoom = 14,maptype="roadmap",source="osm")
sgMap <- get_map(location = "Singapore",zoom = 14,maptype="roadmap",source="osm")
p <- gmap(sgMap)
p <- ggmap(sgMap)
p <- p + geom_point(data=lbl, aes(x=lon, y=lat),
alpha=I(0.5), size=I(5), colour="red")
p <- p + geom_text(data = lbl,aes(x=lon, y=lat,label="text"))
p
p
p <- ggmap(sgMap)
p
sgMap <- get_map(location = "Singapore",zoom = 14,maptype="roadmap",source="osm")
sgMap
p <- ggmap(sgMap)
p <- p + geom_point(data=lbl, aes(x=lon, y=lat),
alpha=I(0.5), size=I(5), colour="red")
p
sgMap <- get_map(location = "Singapore",zoom = 13,source="osm")
ggmap(sgMap)
sgMap <- get_map(location = "Singapore")
p <- ggmap(sgMap)
p
map <- get_map(location="Sydney", zoom=14, maptype="roadmap", source="google")
p <- ggmap(sgMap)
p
library(ggplot2)   # Plotting maps.
library(maps)      # Map data.
library(scales)    #for transperency Functions: alpha() comma()
library(maptools)  #for shapefiles
library(OpenStreetMap) #OSM maps
library(ggmap)     #Google maps
knitr::opts_chunk$set(cache=TRUE)
map <- get_map(location="Sydney", zoom=14, maptype="roadmap", source="google")
p <- ggmap(sgMap)
p
map <- get_map(location="Sydney", zoom=14, maptype="roadmap", source="google")
map
ggmap(map)
?map
View(lbl)
rm(sgMap)
rm(map)
?get_map
map <- get_map(location = "USA")
ggmap(map)
ggmap(map)
openmap(upperLeft = 1.3328,lowerRight = 103.8307)
map <- get_map(location = "USA")
location = c(-70.2954, 43.64278, -70.2350, 43.68093)
portland = get_map(location = location, source = "osm")
portlandMap = ggmap(portland)
portlandMap
?sessionInfo
sessionInfo()
install.packages(c("caret", "forecast", "rgeos", "rmarkdown", "stringi", "tmap"))
install.packages(c("caret", "forecast", "rgeos", "rmarkdown",
)
)
install.packages(c("caret", "forecast", "rgeos", "rmarkdown"))
bookdown:::serve_book()
bookdown:::mathquill()
remove.packages(ggmap)
remove.packages('ggmap')
install.packages(ggmap)
install.packages('ggmap')
install.packages("ggmap")
bookdown:::serve_book()
portlandMap = ggmap(portland)
library(ggmap)
location = c(-70.2954, 43.64278, -70.2350, 43.68093)
map <- get_map(location = location,source = "osm")
ggmap(map)
df <- data.frame(lon=c(-60, -65, -62), lat = c(-1, -5, -10))
ggmap(mp2) +
geom_point(aes(x = lon, y = lat), size = 10, data = df)
mp2 <- ggmap::get_map(location="South America", zoom = 4, source="google")
ggmap(mp2)
my.Map <- get_map(location ="Singapore",source = "osm",zoom = 10)
ggmap(my.Map)
?sessionInfo
sessionInfo()
ls()
files <- list.files()
files
head(files)
kable(mtcars, format = 'latex', booktabs = TRUE)
strings <- c('hands','data','datascience','science','handson',
'handsondatascience','datadatascience')
grep('data*',strings)
grep('data*',strings,value = T)
strings <- c('hands','data','datascience','science','handson',
'handsondatascience','datadatascience','onscience')
grep(pattern = 'data*',strings,value = T)
grep(pattern = 'data?',strings,value = T)
grep(pattern = 'hands?',strings,value = T)
grep(pattern = 'data?',strings,value = T)
grep(pattern = 'data?science',strings,value = T)
strings <- c("a", "ab", "acb", "accb", "acccb", "accccb"))
strings <- c("a", "ab", "acb", "accb", "acccb", "accccb")
grep("ac*b", strings, value = TRUE)
grep(pattern = 'handsdata*science',strings,value = T)
grep(pattern = 'handsondata*science',strings,value = T)
strings <- c('hands','data','datascience','science','handson',
'handsondatascience','datadatascience','onscience','onon')
grep(pattern = 'on?',strings,value = T)
strings <- c("a", "ab", "acb", "accb", "acccb", "accccb")
grep('acc?b',strings,value = T)
grep('a(cc)?b',strings,value = T)
grep('acc?b',strings,value = T)
grep('ac?b',strings,value = T)
strings <- c('patterns','patt','erns','tern')
grep(pattern = 'on?',strings,value = T)
strings <- c('patterns','patt','erns','tern')
strings <- c('patterns','patt','erns','tern','pat')
grep('pat*',strings)
grep('pat*',strings,value = T)
grep('pat?',strings,value = T)
grep('t?',strings,value = T)
grep('pat',strings,value = T)
strings <- c('aaab','abb','abc','abbcd','bbbc')
grep('a?',strings,value = T)
grep('ab?',strings,value = T)
grep('bc?',strings,value = T)
grep('(ab)?',strings,value = T)
grep('(b)?',strings,value = T)
grep('ab{2}',strings)
grep('ab{2}',strings,value = T)
grep('b{2}',strings,value = T)
grep('b{1,2}',strings,value = T)
strings <- c('aaab','abb','bc','abbcd','bbbc','abab','caa')
grep('b{1,2}',strings,value = T)
grep('b{1,}',strings,value = T)
grep('ab*b',strings,value = T)
grep(pattern = 'ab*b',strings,value = T)
grep(pattern = 'ab?',strings,value = T)
grep(pattern = 'bb?',strings,value = T)
grep(pattern = '(bb)?',strings,value = T)
grep(pattern = 'ab?c',strings,value = T)
grep(pattern = 'a(bb)?c',strings,value = T)
grep(pattern = '(bb)?',strings,value = T)
grep(pattern = 'a(bb)c?',strings,value = T)
grep(pattern = 'abbc?',strings,value = T)
grep(pattern = 'b{2,3}?',strings,value = T)
grep(pattern = 'b{2,}?',strings,value = T)
quantifier <- read.table(file = 'tables/characterclass.txt',header = T,sep='\t')
knitr::kable(
quantifier,
caption = 'Character Class'
)
#* Strings containing data atleast 0 times
grep(pattern = 'ab*b',strings,value = T)
#? Strings containing the pattern atmost ones
grep(pattern = 'abbc?',strings,value = T)
#Atleast two occurances
grep(pattern = 'b{2,}?',strings,value = T)
grep(pattern = "[0-9]",'abc12d')
:w
grep(pattern = '^data',string)
string <- c('hands','data','on','datascience','handsondatascience','handson')
grep(pattern = '^data',string)
grep(pattern = '^data',string,value = T)
grep(pattern = 'on$',string,value = T)
library(rattle) # The weather dataset.
library(stringr) # Pre-eminent package for string handling.
cat("hello","world",sep="\t")
x <- 123 #Using numeric values with cat
cat ("hello",x,sep="\t")
paste("hello","world", sep="\t") #usage paste function
paste('hello',NULL,'world')
str_c('hello',NULL,'world') # str_c with null characters
nchar('hello world') #nchar functionality
factor_example = factor(c(1, 1, 0,0), labels = c("success", "fail"))
#nchar with factor vector
nchar(factor_example)
string <- c('hands','data','on','datascience','handsondatascience','handson')
#Matching occurance of pattern at the begining of the string
grep(pattern = '^data',string,value = T)
#Matching occurance of pattern at the end of the string
grep(pattern = 'on$',string,value = T)
map <- get_map(location="Sydney", zoom=14, maptype="roadmap", source="google")
map
ggmap(map)
remove.packages(ggmap)
remove.packages('ggmap')
install.packages('ggmap')
my.Map <- get_map(location ="Singapore",source = "osm",zoom = 10)
ggmap(my.Map)
library(ggmap)
my.Map <- get_map(location ="Singapore",source = "osm",zoom = 10)
ggmap(my.Map)
str(my.Map)
ggmap(my.Map)
pie <- ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie
pie + coord_polar(theta = "y")
library(ggmap)
sg <- get_map(location = 'Singapore')
ggmap(sg)
?get_stamenmap
gc <- geocode("baylor university")
google <- get_googlemap("baylor university", zoom = 15)
ggmap(google) +
geom_point(aes(x = lon, y = lat), data = gc, colour = "red", size = 2)
remove.packages(ggmap)
ggmap
remove.packages('ggmap')
install.packages("ggmap")
gc <- geocode("baylor university")
google <- get_googlemap("baylor university", zoom = 15)
ggmap(google) +
geom_point(aes(x = lon, y = lat), data = gc, colour = "red", size = 2)
library(ggmap)
gc <- geocode("baylor university")
google <- get_googlemap("baylor university", zoom = 15)
ggmap(google) +
geom_point(aes(x = lon, y = lat), data = gc, colour = "red", size = 2)
library(ggplot2)   # Plotting maps.
needs(ggmap)
install.packages(needs)
install.packages('ggmap')
install.packages('needs')
needs(scales)
needs(scales)
library(needs)
needs(maps)
needs(scales)
needs(maptools)
needs(ggmap)
get_map(location = 'new zeland')
nz <- get_map(location = 'new zeland')
ggmap(nz)
nz <- get_map(location = 'new zeland', zoom = 10, source = 'osm')
ggmap(nz)
library(ggplot2)
install.packages('UpsetR')
y
install.packages('UpSetR')
library(UpSetR)
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"),
header = T, sep = ";")
movies
upset(movies, nsets = 6, number.angles = 30, point.size = 3.5, line.size = 2,
mainbar.y.label = "Genre Intersections", sets.x.label = "Movies Per Genre",
text.scale = c(1.3, 1.3, 1, 1, 2, 0.75))
upset(movies, nsets = 3, number.angles = 30, point.size = 3.5, line.size = 2,
mainbar.y.label = "Genre Intersections", sets.x.label = "Movies Per Genre",
text.scale = c(1.3, 1.3, 1, 1, 2, 0.75))
upset(movies, boxplot.summary = c("AvgRating", "ReleaseDate"))
df <- read.csv('~/Work/Projects/HLBB/test.csv')
df <- read.csv('~/Work/Projects/HLBB/test.csv',header = T)
df''
df
df$Customer_Type
df$A
melt(df,id.vars='Customer_Type')
library(reshape2)
melt(df,id.vars='Customer_Type')
df.m <- melt(df,id.vars='Customer_Type')
library(Venndiagram)
library(VennDiagram)
install.packages('VennDiagram')
library(VennDiagram)
draw.triple.venn(10,20,30,5,10,10,5)
draw.triple.venn(10,20,30,5,10,10,5)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'))
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'))
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.8)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.1)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 1)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.5)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 3)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = `.1`)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 1.2)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.04)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.004)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 1)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 0.001)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = ``)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = 1)
draw.triple.venn(10,20,30,5,10,10,5,category = c('dogs','cats','rats'),fill = c('green','red','blue'),alpha = .1)
upset(movies,nsets = 5)
df <- read.csv(file = '~/Work/Projects/HLBB/test_data.csv',header = T)
upset(df,nsets = 5)
head(movies)
?upset
plot1 <- function(mydata, x){
myplot <- (ggplot(mydata, aes_string(x= x, fill = "color"))
+ geom_histogram() + scale_fill_identity()
+ theme(plot.margin = unit(c(0,0,0,0), "cm")))
}
plot1(movies)
library(ggplot2)
plot1(movies)
expressionInput <- c(one = 2, two = 1, three = 2, `one&two` = 1, `one&three` = 4,
`two&three` = 1, `one&two&three` = 2)
expressionInput
fromExpression(expressionInput)
upset(fromExpression(expressionInput), order.by = 'freq')
upset(fromExpression(expressionInput))
df <- read.csv('~/Work/Projects/HLBB/test_data.csv',header = T)
df$Column
library(stringr)
str_replace_all(df$Column,'&$','$')
str_replace_all(df$Column,'&$','')
str_replace_all(df$Column,'&$','')
df <- read.csv('~/Work/Projects/HLBB/test_data.csv',header = T)
df[df$OTC == 1,'Column']
df[df$OTC == 1,]$Column <- str_c('OTC&',df[df$OTC == 1,]$Column)
str_c('OTC&',df[df$OTC == 1,]$Column)
df[df$OTC == 1,'Column']
df <- read.csv('~/Work/Projects/HLBB/test_data.csv',header = T)
str_c('OTC&',df[df$OTC == 1,]$Column)
str_c('OTC&',df[df$OTC == 1,]$Column)
df[df$OTC == 1,]$Column <- str_c('OTC&',df[df$OTC == 1,]$Column)
df <- read.csv('~/Work/Projects/HLBB/test_data.csv',header = T)
df[df$OTC == 1,]$Column <- as.factor(str_c('OTC&',df[df$OTC == 1,]$Column))
df <- read.csv('~/Work/Projects/HLBB/test_data.csv',header = T)
df$Column <- as.character(df$Column)
df[df$OTC == 1,]$Column <- str_c('OTC&',df[df$OTC == 1,]$Column)
df$Column
df$Column <- str_replace(df$Column,'&$','')
df$Column
expressionInput
class(expressionInput)
row.names(expressionInput)
col.names(expressionInput)
colnames(expressionInput)
expressionInput[1:2]
expressionInput[1:2,]
names(expressionInput)
expresInp <- df$VALUES
names(expresInp) <- df$Column
expresInp
class(expresInp)
upset(fromExpression(expresInp))
p <- upset(fromExpression(expresInp))
library(RColorBrewer)
library(RColorBrewer)
p + scale_color_brewer(palette = 2)
p + scale_color_brewer(palette = 1)
class(p)
p
p <- upset(fromExpression(expresInp))
class(p)
p
upset(fromExpression(expressionInp))
expresInp <- df$VALUES
names(expresInp) <- df$Column
upset(fromExpression(expresInp),color.pal = 2)
upset(fromExpression(expresInp),color.pal = 1)
upset(fromExpression(expresInp),color.pal = 1)
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = 'orange')
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('orange','green'))
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('blue'))
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'))
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange')
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange',sets.bar.color = 'red')
df <- read.csv('~/Work/Projects/HLBB/test_data.csv', header = T)
head(df)
expresInp <- df$MASS
names(expresInp)
names(expresInp) <- df$Column
upset(fromExpression(expresInp))
upset(fromExpression(expresInp),color.pal = brewer.pal(n=5,"Set1"))
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange')
df$Column
df[df$Column == 'CDM',c('MASS')]
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange',nsets = 6)
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange',nsets = 6,mainbar.y.label = 'Customer Count')
upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange',nsets = 6,mainbar.y.label = 'Customer Count',text.scale = 12)
p <- upset(fromExpression(expresInp),color.pal = 1,main.bar.color = c('dodgerblue'), matrix.color = 'orange',nsets = 6,mainbar.y.label = 'Customer Count')
?getDataPart
?getData
??getData
aust <- getData('alt', country='Australia', mask=TRUE)
xvar_rand_norm <- rnorm(1000, mean = 5)
df.xvar <- data.frame(xvar_rand_norm)
xvar_mean <- mean(xvar_rand_norm)
ggplot(data = df.xvar, aes(x = xvar_rand_norm)) +
geom_histogram() +
geom_vline(xintercept = xvar_mean, color = "dark red") +
annotate("text", label = paste("Mean: ", round(xvar_mean,digits = 2)), x = xvar_mean, y = 30, color = "white", size = 5)
library(ggplot2)
ggplot(data = df.xvar, aes(x = xvar_rand_norm)) +
geom_histogram() +
geom_vline(xintercept = xvar_mean, color = "dark red") +
annotate("text", label = paste("Mean: ", round(xvar_mean,digits = 2)), x = xvar_mean, y = 30, color = "white", size = 5)
?annotate
install.packages("car",dependencies = T)

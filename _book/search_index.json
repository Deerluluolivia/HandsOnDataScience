[
["index.html", "Hands on Data Science with R 1 Introduction", " Hands on Data Science with R Graham Williams Karthik Thirumalai 1 Introduction Data Science is a forest of skills to learn and master. Hands on Data Science with R is a survival guide to data science using R. This book will teach you the practical skills and best practices of data science - With comprehensive and carefully curated solutions to most data science problems, this book provides you a swiss army knife to cut throught the forest. "],
["strings-manipulation.html", "2 Strings Manipulation", " 2 Strings Manipulation In this module we introduce to tools available in R for handling and processing strings. The required packages for this module include: library(rattle) # The weather dataset. library(stringr) # Pre-eminent package for string handling. "],
["string-concatenation.html", "2.1 String Concatenation", " 2.1 String Concatenation Let us start with the simplest of string operations - concatenation two strings. The cat() function concatenates objects and could also print them to screen or to a file. By default it converts even numeric and other complex objects into character type and then concatenates . Alternatively we can use the paste() function to concatenate and print the values to screen. The str_c() function is similar to the paste() function but the default separator is white space and it ignores NULL characters. cat(&quot;hello&quot;,&quot;world&quot;,sep=&quot;\\t&quot;) ## hello world x &lt;- 123 #Using numeric values with cat cat (&quot;hello&quot;,x,sep=&quot;\\t&quot;) ## hello 123 paste(&quot;hello&quot;,&quot;world&quot;, sep=&quot;\\t&quot;) #usage paste function ## [1] &quot;hello\\tworld&quot; str_c(&#39;hello&#39;,NULL,&#39;world&#39;) # str_c with null characters ## [1] &quot;helloworld&quot; "],
["string-length.html", "2.2 String Length", " 2.2 String Length The nchar() function in the base package is used to measure the typical length of the string. The str_length() package could also be used to measure string lengths. In comparisson the str_length() package handles NA characters more accurately as nchar(NA) returns 2 while str_length() returns NA. The other advantage of str_length() over nchar() is its ability to handle factors robustly. nchar(&#39;hello world&#39;) #nchar functionality ## [1] 11 nchar(NA) ## [1] NA str_length(&#39;hello world&#39;) #str_length from stringr package ## [1] 11 str_length(NA) ## [1] NA factor_example = factor(c(1, 1, 0,0), labels = c(&quot;success&quot;, &quot;fail&quot;)) #Handling factors str_length str_length(factor_example) ## [1] 4 4 7 7 #Handling factors nchar nchar(factor_example) ## Error in nchar(factor_example): &#39;nchar()&#39; requires a character vector "],
["case-conversion.html", "2.3 Case Conversion", " 2.3 Case Conversion Often during data transformations strings have to be converted from one case to the other. These simple transformations could be achieved by tolower() and toupper() functions. The casefolding() function could also be used as a wrapper to the two functions. #Conversion to upper case toupper(&#39;string manipulation&#39;) ## [1] &quot;STRING MANIPULATION&quot; #Conversion to lower case tolower(&#39;STRING MANIPULATION&#39;) ## [1] &quot;string manipulation&quot; #casefold to upper casefold(&#39;string manipulation&#39;,upper=TRUE) ## [1] &quot;STRING MANIPULATION&quot; "],
["substring-operation.html", "2.4 Substring Operation", " 2.4 Substring Operation Finding substrings are one of the most common string manipulation operations. The substr() could be used to extract, replace parts of the string. The substring() functions performs the same operations on a character vector. #Exctraction strings substr(&#39;string manipulation&#39;,3,6) ## [1] &quot;ring&quot; #Replacing strings with substr s &lt;- &#39;string manipulation&#39; substr(s,3,6) &lt;- &#39;RING&#39; s ## [1] &quot;stRING manipulation&quot; #Extraction from character vectors using substring x &lt;- c(&#39;abcd&#39;,&#39;aabcb&#39;,&#39;babcc&#39;,&#39;cabcd&#39;) substring(x,2,last = 4) ## [1] &quot;bcd&quot; &quot;abc&quot; &quot;abc&quot; &quot;abc&quot; #Replacing in character vector using substring substring(x,2,last=4) &lt;- &#39;AB&#39; x ## [1] &quot;aABd&quot; &quot;aABcb&quot; &quot;bABcc&quot; &quot;cABcd&quot; The stringr package offers str_sub() which is a equivalent of substring(). The str_sub() function handles negative values even more robustly than the substring() function. y = c(&quot;string&quot;, &quot;manipulation&quot;, &quot;always&quot;, &quot;fascinating&quot;) # substring function using negative indices substring(y,first = -4,last = -1) ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; # str_sub handles negative indices str_sub(y , start = -4, end = -1) ## [1] &quot;ring&quot; &quot;tion&quot; &quot;ways&quot; &quot;ting&quot; #String replacement using str_sub str_sub(y,start=-4,end=-1) &lt;- &#39;RING&#39; y ## [1] &quot;stRING&quot; &quot;manipulaRING&quot; &quot;alRING&quot; &quot;fascinaRING&quot; "],
["string-trimming-and-padding.html", "2.5 String trimming and padding", " 2.5 String trimming and padding One of the major challenges of string parsing is handline additional whitespaces in words. Often additional widespaces are present on the left, right or both sides of the word. The str_trim function offers an effective way to get rid of these whitespaces. whitespace.vector &lt;- c(&#39; abc&#39;,&#39;def &#39;,&#39; ghi &#39;) #trimming on left sides str_trim(whitespace.vector,side = &#39;left&#39;) ## [1] &quot;abc&quot; &quot;def &quot; &quot;ghi &quot; #trimming on right sides str_trim(whitespace.vector,side = &#39;right&#39;) ## [1] &quot; abc&quot; &quot;def&quot; &quot; ghi&quot; #trimming on both sides str_trim(whitespace.vector,side = &#39;both&#39;) ## [1] &quot;abc&quot; &quot;def&quot; &quot;ghi&quot; Conversely we could also pad a string with additional characters for a defined width using the str_pad() function. The default padding character is a space. #Left padding str_pad(&#39;abc&#39;,width=7,side=&quot;left&quot;) ## [1] &quot; abc&quot; #Right padding str_pad(&#39;abc&#39;,width=7,side=&quot;right&quot;) ## [1] &quot;abc &quot; #Padding other characters str_pad(&#39;abc&#39;,width=7,side=&quot;both&quot;,pad=&quot;#&quot;) ## [1] &quot;##abc##&quot; "],
["string-wrapping.html", "2.6 String Wrapping", " 2.6 String Wrapping Sometimes text have to be manipulated to neat paragraphs of defined width. The str_wrap() function could be used to format the text into defined paragraphs of specific width. some_text = &#39;All the Worlds a stage, All men are merely players&#39; cat(str_wrap(some_text,width=25)) ## All the Worlds a stage, ## All men are merely ## players "],
["extracting-words.html", "2.7 Extracting Words", " 2.7 Extracting Words Let us complete this chapter with the simple word() function which extract words from a sentence. We specify the positions of the word to be extracted from the setence. The default separator value is space. #Extracting the first two words of a character vector some.text &lt;- c(&#39;The quick brown fox&#39;,&#39;jumps on the brown dog&#39;) word(some.text,start = 1,end=2) ## [1] &quot;The quick&quot; &quot;jumps on&quot; #extracting all but the last word word(some.text,start=1,end=-2) ## [1] &quot;The quick brown&quot; &quot;jumps on the brown&quot; -->"]
]
